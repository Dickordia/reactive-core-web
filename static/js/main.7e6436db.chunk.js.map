{"version":3,"sources":["assets/logo.svg","components/AppChart.js","components/Landscape.tsx","components/LoginScreen.tsx","core-module/store/types.ts","core-module/store/reducer.ts","core-module/store/actions.ts","core-module/store/index.ts","containers/Login.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","getRandomArray","numItems","data","i","push","label","value","Math","round","random","getRandomDateArray","baseTime","Date","getTime","time","getData","title","Chart","defaults","global","defaultFontFamily","BarChart","props","canvasRef","React","createRef","this","myChart","labels","map","d","datasets","update","current","type","options","maintainAspectRatio","scales","yAxes","ticks","min","max","backgroundColor","color","ref","Component","LineChart","xAxes","unit","fill","borderColor","pointRadius","DoughnutChart","colors","BubbleChart","x","y","r","display","text","scaleLabel","labelString","aData","AppChart","RenderChart","className","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","segments","flex","flexShrink","flexDirection","alignItems","Landscape","useState","alignment","setAlignment","reload","setReload","classes","AppBar","position","Toolbar","IconButton","edge","aria-label","onClick","ToggleButtonGroup","size","exclusive","onChange","event","newAlignment","ToggleButton","Typography","variant","Button","username","logoutAction","container","form","borderRadius","padding","submit","margin","ActionDef","initialState","isLoading","jsonData","require","user","name","state","action","SET_LOADING","produce","draft","payload","SET_LOGIN","LOGOUT","console","log","setLoading","middleware","applyMiddleware","thunk","Login","connect","logedinUsername","loginAction","password","onComplete","dispatch","setTimeout","setLogin","setUsername","setPassword","isLogedIn","setIsLogedIn","CircularProgress","isCredential","trim","src","logo","alt","Container","component","maxWidth","TextField","target","defaultValue","fullWidth","id","autoComplete","disabled","success","alert","Boolean","window","location","hostname","match","store","_createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,ihBCQ3C,SAASC,EAAeC,GAIpB,IAFA,IACIC,EAAO,GACFC,EAAI,EAAGA,EAAIF,EAAUE,IAC1BD,EAAKE,KAAK,CACNC,MAJI,6BAISF,GACbG,MAAOC,KAAKC,MAAM,GAAK,GAAKD,KAAKE,YAGzC,OAAOP,EAGX,SAASQ,EAAmBT,GAKxB,IAHA,IAAIC,EAAO,GACPS,EAAW,IAAIC,KAAK,uBAAuBC,UAEtCV,EAAI,EAAGA,EAAIF,EAAUE,IAC1BD,EAAKE,KAAK,CACNU,KAAM,IAAIF,KAAKD,EAHX,MAGsBR,GAC1BG,MAAOC,KAAKC,MAAM,GAAK,GAAKD,KAAKE,YAGzC,OAAOP,EAGX,SAASa,IACL,IAAIb,EAAO,GAsBX,OApBAA,EAAKE,KAAK,CACNY,MAAO,SACPd,KAAMQ,EAAmB,MAG7BR,EAAKE,KAAK,CACNY,MAAO,aACPd,KAAMF,EAAe,MAGzBE,EAAKE,KAAK,CACNY,MAAO,aACPd,KAAMF,EAAe,MAGzBE,EAAKE,KAAK,CACNY,MAAO,SACPd,KAAMF,EAAe,KAGlBE,EArDXe,IAAMC,SAASC,OAAOC,kBAAoB,qB,IA0DpCC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,UAAYC,IAAMC,YAFR,E,kFAMfC,KAAKC,QAAQzB,KAAK0B,OAASF,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEzB,SACtDqB,KAAKC,QAAQzB,KAAK6B,SAAS,GAAG7B,KAAOwB,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAExB,SAChEoB,KAAKC,QAAQK,W,0CAIbN,KAAKC,QAAU,IAAIV,IAAMS,KAAKH,UAAUU,QAAS,CAC7CC,KAAM,MACNC,QAAS,CACLC,qBAAqB,EACrBC,OAAQ,CACJC,MAAO,CACH,CACIC,MAAO,CACHC,IAAK,EACLC,IAAK,SAMzBvC,KAAM,CACF0B,OAAQF,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEzB,SACnC0B,SAAU,CAAC,CACP1B,MAAOqB,KAAKJ,MAAMN,MAClBd,KAAMwB,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAExB,SACjCoC,gBAAiBhB,KAAKJ,MAAMqB,a,+BAOxC,OACI,4BAAQC,IAAKlB,KAAKH,gB,GAzCPC,IAAMqB,WAgDvBC,E,YACF,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,UAAYC,IAAMC,YAFR,E,kFAMfC,KAAKC,QAAQzB,KAAK0B,OAASF,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEhB,QACtDY,KAAKC,QAAQzB,KAAK6B,SAAS,GAAG7B,KAAOwB,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAExB,SAChEoB,KAAKC,QAAQK,W,0CAIbN,KAAKC,QAAU,IAAIV,IAAMS,KAAKH,UAAUU,QAAS,CAC7CC,KAAM,OACNC,QAAS,CACLC,qBAAqB,EACrBC,OAAQ,CACJU,MAAO,CACH,CACIb,KAAM,OACNpB,KAAM,CACFkC,KAAM,UAIlBV,MAAO,CACH,CACIC,MAAO,CACHC,IAAK,OAMzBtC,KAAM,CACF0B,OAAQF,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEhB,QACnCiB,SAAU,CAAC,CACP1B,MAAOqB,KAAKJ,MAAMN,MAClBd,KAAMwB,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAExB,SACjC2C,MAAM,EACNP,gBAAiBhB,KAAKJ,MAAMqB,MAC5BO,YAAa,UACbC,YAAa,S,+BAOzB,OAAO,4BAAQP,IAAKlB,KAAKH,gB,GAlDTC,IAAMqB,WAwDxBO,E,YACF,WAAY9B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,UAAYC,IAAMC,YAFR,E,kFAMfC,KAAKC,QAAQzB,KAAK0B,OAASF,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEzB,SACtDqB,KAAKC,QAAQzB,KAAK6B,SAAS,GAAG7B,KAAOwB,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAExB,SAChEoB,KAAKC,QAAQK,W,0CAIbN,KAAKC,QAAU,IAAIV,IAAMS,KAAKH,UAAUU,QAAS,CAC7CC,KAAM,WACNC,QAAS,CACLC,qBAAqB,GAEzBlC,KAAM,CACF0B,OAAQF,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEzB,SACnC0B,SAAU,CAAC,CACP7B,KAAMwB,KAAKJ,MAAMpB,KAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAExB,SACjCoC,gBAAiBhB,KAAKJ,MAAM+B,c,+BASxC,OAAO,4BAAQT,IAAKlB,KAAKH,gB,GA/BLC,IAAMqB,WAoC5BS,E,YACF,WAAYhC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,UAAYC,IAAMC,YAFR,E,kFAMfC,KAAKC,QAAQK,W,0CAIbN,KAAKC,QAAU,IAAIV,IAAMS,KAAKH,UAAUU,QAAS,CAC7CC,KAAM,SACNhC,KAAM,CACF0B,OAAQ,SACRG,SAAU,CACN,CACI1B,MAAO,CAAC,SACRqC,gBAAiB,uBACjBQ,YAAa,qBACbhD,KAAM,CAAC,CACHqD,EAAG,SACHC,EAAG,MACHC,EAAG,MAER,CACCpD,MAAO,CAAC,WACRqC,gBAAiB,uBACjBQ,YAAa,qBACbhD,KAAM,CAAC,CACHqD,EAAG,OACHC,EAAG,MACHC,EAAG,MAER,CACCpD,MAAO,CAAC,WACRqC,gBAAiB,kBACjBQ,YAAa,OACbhD,KAAM,CAAC,CACHqD,EAAG,QACHC,EAAG,MACHC,EAAG,MAER,CACCpD,MAAO,CAAC,SACRqC,gBAAiB,sBACjBQ,YAAa,oBACbhD,KAAM,CAAC,CACHqD,EAAG,QACHC,EAAG,MACHC,EAAG,QAKnBtB,QAAS,CACLnB,MAAO,CACH0C,SAAS,EACTC,KAAM,iDACPtB,OAAQ,CACPC,MAAO,CAAC,CACJsB,WAAY,CACRF,SAAS,EACTG,YAAa,eAGrBd,MAAO,CAAC,CACJa,WAAY,CACRF,SAAS,EACTG,YAAa,qB,+BAWjC,OAAO,4BAAQjB,IAAKlB,KAAKH,gB,GAhFPC,IAAMqB,WAsF5BiB,EAAQ/C,IAESgD,E,2MACjBC,YAAc,WACV,OAAQ,EAAK1C,MAAMhB,OACf,KAAK,EACD,OACI,yBAAK2D,UAAU,sBACX,kBAAC,EAAD,CACI/D,KAAM4D,EAAM,GAAG5D,KACfc,MAAO8C,EAAM,GAAG9C,MAChB2B,MAAM,aAKtB,KAAK,EACD,OACI,yBAAKsB,UAAU,sBACX,kBAAC,EAAD,CACI/D,KAAM4D,EAAM,GAAG5D,KACfc,MAAO8C,EAAM,GAAG9C,MAChB2B,MAAM,aAKtB,KAAK,EACD,OACI,yBAAKsB,UAAU,sBACX,kBAAC,EAAD,OAIZ,KAAK,EACD,OACI,yBAAKA,UAAU,sBACX,kBAAC,EAAD,CACI/D,KAAM4D,EAAM,GAAG5D,KACfc,MAAO8C,EAAM,GAAG9C,MAChBqC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,cAQpF,OAAO,M,wEAMP,OAFAS,EAAQ/C,IAGJ,yBAAKkD,UAAU,OACX,uBAAMD,YAAN,W,GAtDsBxC,IAAMqB,WCrRtCqB,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,EACV7B,gBAAiB,OAErB8B,WAAY,CACRC,YAAaL,EAAMM,QAAQ,IAE/B1D,MAAO,CACHuD,SAAU,GAEdI,SAAU,CACNC,KAAM,GACNC,WAAY,GACZN,SAAU,GACVb,QAAS,eACToB,cAAe,SACfC,WAAY,eAKT,SAASC,EAAU1D,GAAa,IAAD,EACRE,IAAMyD,SAAiB,GADf,mBACnCC,EADmC,KACxBC,EADwB,OAEd3D,IAAMyD,UAAkB,GAFV,mBAEnCG,EAFmC,KAE3BC,EAF2B,KAGpCC,EAAUpB,IAUhB,OACI,6BACA,yBAAKD,UAAWqB,EAAQhB,MACpB,kBAACiB,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQ1B,UAAWqB,EAAQd,WAAY7B,MAAM,UAAUiD,aAAW,OAAOC,QAT7F,WACbR,GAAWD,KASS,kBAAC,IAAD,OAGJ,yBAAKnB,UAAWqB,EAAQX,UACpB,kBAACmB,EAAA,EAAD,CACIC,KAAK,QACLzF,MAAO4E,EACPc,WAAS,EACTC,SAtBJ,SAACC,EAAsCC,GAC3DhB,EAAagB,KAuBW,kBAACC,EAAA,EAAD,CAAc9F,MAAO,GAArB,UACA,kBAAC8F,EAAA,EAAD,CAAc9F,MAAO,GAArB,OACA,kBAAC8F,EAAA,EAAD,CAAc9F,MAAO,GAArB,UACA,kBAAC8F,EAAA,EAAD,CAAc9F,MAAO,GAArB,SAKR,kBAAC+F,EAAA,EAAD,CAAYC,QAAQ,KAAKrC,UAAWqB,EAAQtE,QAC5C,kBAACuF,EAAA,EAAD,CAAQ5D,MAAM,WAAWrB,EAAMkF,UAC/B,kBAACd,EAAA,EAAD,CAAYC,KAAK,QAAQ1B,UAAWqB,EAAQd,WAAY7B,MAAM,UAAUiD,aAAW,OAAOC,QAASvE,EAAMmF,cACzG,kBAAC,IAAD,UAKZ,kBAAC,EAAD,CAAUnG,MAAO4E,EAAWE,OAAQA,KCpEhD,IAAMlB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCsC,UAAW,CACP9B,KAAM,EACNlC,gBAAiB,WAErBiE,KAAM,CACFjD,QAAS,OACToB,cAAe,SACfC,WAAY,SACZrC,gBAAiB,UACjBkE,aAAc,GACdC,QAAS,GACTjC,KAAM,IAEVkC,OAAQ,CACJC,OAAQ3C,EAAMM,QAAQ,EAAG,EAAG,GAC5BhC,gBAAiB,e,IC5BbsE,E,0BAAAA,K,0BAAAA,E,sBAAAA,E,iBAAAA,M,iBCICC,EAAiC,CAC1CC,WAAW,EACXC,SALUC,EAAQ,IAMlBC,KAAM,CAACC,KAAM,KAGF,aAAsD,IAArDC,EAAoD,uDAA5CN,EAAcO,EAA8B,uCAChE,OAAQA,EAAOtF,MACX,KAAK8E,EAAUS,YACX,OAAOC,YAAQH,GAAO,SAAAI,GAClBA,EAAMT,UAAYM,EAAOI,WAGjC,KAAKZ,EAAUa,UACX,OAAOH,YAAQH,GAAO,SAAAI,GAClBA,EAAMN,KAAOG,EAAOI,WAG5B,KAAKZ,EAAUc,OACX,OAAOJ,YAAQH,GAAO,SAAAI,GAClBI,QAAQC,IAAIL,GACZA,EAAMN,KAAKC,KAAO,GAClBS,QAAQC,IAAI,YACZD,QAAQC,IAAIL,MAIxB,OAAOJ,GC9BEU,EAAa,SAACV,GACvB,MAAO,CACHrF,KAAM8E,EAAUS,YAChBG,QAASL,ICIXW,EAAaC,YAAgBC,KCQpBC,GAZAC,aAAQ,SAACf,GAAD,MACnB,CACIrH,KAAMqH,EAAMJ,SACZoB,gBAAiBhB,EAAMF,KAAKC,KAC5BJ,UAAWK,EAAML,aAErB,CACIsB,YFUa,SAAChC,EACAiC,EAClBC,GAFiB,OAE0B,SAACC,GAE5CA,EAASV,GAAW,IAEpBW,YAAW,WACU,WAAbH,GACAE,EArBY,SAACnC,GACrB,MAAO,CACHtE,KAAM8E,EAAUa,UAChBD,QAAS,CAAEN,KAAMd,IAkBJqC,CAASrC,IAClBkC,GAAW,IAGXA,GAAW,GAGfC,EAASV,GAAW,MACrB,OEzBCxB,aF4BoB,kBAAM,SAACkC,GAC/BA,EAzBO,CACHzG,KAAM8E,EAAUc,YEbTQ,EL6BA,SAAqBhH,GAChC,IAAMgE,EAAUpB,IAD4B,EAEZe,mBAAS,IAFG,mBAErCuB,EAFqC,KAE3BsC,EAF2B,OAGZ7D,mBAAS,IAHG,mBAGrCwD,EAHqC,KAG3BM,EAH2B,OAIV9D,oBAAS,GAJC,mBAIrC+D,EAJqC,KAI1BC,EAJ0B,KAO5C,GAAID,EAAW,CAQX,OACI,kBAAChE,EAAD,CAAWwB,SAAUA,EAAUC,aARb,WAClBwC,GAAa,GACbH,EAAY,IACZC,EAAY,IACZzH,EAAMmF,kBA6Bd,GAAInF,EAAM4F,UACN,OACI,yBAAKjD,UAAU,aACX,kBAACiF,EAAA,EAAD,OAKZ,IAAMC,EAAmC,KAApB3C,EAAS4C,QAAqC,KAApBX,EAASW,OAExD,OACI,4BAAQnF,UAAU,cACd,yBAAKoF,IAAKC,IAAMrF,UAAU,WAAWsF,IAAI,SAC7C,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,yBAAKzF,UAAWqB,EAAQqB,MACpB,kBAACgD,EAAA,EAAD,CACI1D,SApCU,SAACC,GAAgD,IAAD,EAClCA,EAA5B0D,OAAgBtJ,GAD8C,EACpDgH,KADoD,EAC9ChH,OACxBwI,EAAYxI,IAmCAuJ,aAAcrD,EACdF,QAAQ,WACRS,OAAO,SACP+C,WAAS,EACTC,GAAG,WACH1J,MAAM,WACNiH,KAAK,aAET,kBAACqC,EAAA,EAAD,CACI1D,SAzCa,SAACC,GAAgD,IAAD,EACrCA,EAA5B0D,OAAgBtJ,GADiD,EACvDgH,KADuD,EACjDhH,OACxByI,EAAYzI,IAwCAuJ,aAAcpB,EACdnC,QAAQ,WACRS,OAAO,SACP+C,WAAS,EACTxC,KAAK,WACLjH,MAAM,WACN6B,KAAK,WACL6H,GAAG,WACHC,aAAa,qBAEjB,kBAACzD,EAAA,EAAD,CACI0D,UAAWd,EACXjH,KAAK,SACL4H,WAAS,EACTxD,QAAQ,YACR3D,MAAM,UACNsB,UAAWqB,EAAQwB,OACnBjB,QAtDK,WACjBvE,EAAMkH,YAAYhC,EAAUiC,GAAU,SAACyB,GAC/BA,EACAjB,GAAa,GAEbkB,MAAM,wCA0CN,gBMrGIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,GHIKC,YAAaC,EAAS1D,EAAciB,GGI/C0C,IAASC,OAAO,mBANK,kBACjB,kBAAC,IAAD,CAAUJ,MAAOA,IACb,kBAAC,GAAD,SAIQ,MAAkBK,SAASC,eAAe,SD0HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.7e6436db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport './styles/AppChart.css';\n\nimport Chart from 'chart.js'\n\nChart.defaults.global.defaultFontFamily = \"Roboto, sans-serif\";\n\n// Data generation\nfunction getRandomArray(numItems) {\n    // Create random array of objects\n    let names = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let data = [];\n    for (var i = 0; i < numItems; i++) {\n        data.push({\n            label: names[i],\n            value: Math.round(20 + 80 * Math.random())\n        });\n    }\n    return data;\n}\n\nfunction getRandomDateArray(numItems) {\n    // Create random array of objects (with date)\n    let data = [];\n    let baseTime = new Date('2018-05-01T00:00:00').getTime();\n    let dayMs = 24 * 60 * 60 * 1000;\n    for (var i = 0; i < numItems; i++) {\n        data.push({\n            time: new Date(baseTime + i * dayMs),\n            value: Math.round(20 + 80 * Math.random())\n        });\n    }\n    return data;\n}\n\nfunction getData() {\n    let data = [];\n\n    data.push({\n        title: 'Visits',\n        data: getRandomDateArray(30)\n    });\n\n    data.push({\n        title: 'Categories',\n        data: getRandomArray(20)\n    });\n\n    data.push({\n        title: 'Categories',\n        data: getRandomArray(10)\n    });\n\n    data.push({\n        title: 'Data 4',\n        data: getRandomArray(6)\n    });\n\n    return data;\n}\n\n\n// BarChart\nclass BarChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    componentDidUpdate() {\n        this.myChart.data.labels = this.props.data.map(d => d.label);\n        this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\n        this.myChart.update();\n    }\n\n    componentDidMount() {\n        this.myChart = new Chart(this.canvasRef.current, {\n            type: 'bar',\n            options: {\n                maintainAspectRatio: false,\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                min: 0,\n                                max: 100\n                            }\n                        }\n                    ]\n                }\n            },\n            data: {\n                labels: this.props.data.map(d => d.label),\n                datasets: [{\n                    label: this.props.title,\n                    data: this.props.data.map(d => d.value),\n                    backgroundColor: this.props.color\n                }]\n            }\n        });\n    }\n\n    render() {\n        return (\n            <canvas ref={this.canvasRef} />\n        );\n    }\n}\n\n\n// LineChart\nclass LineChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    componentDidUpdate() {\n        this.myChart.data.labels = this.props.data.map(d => d.time);\n        this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\n        this.myChart.update();\n    }\n\n    componentDidMount() {\n        this.myChart = new Chart(this.canvasRef.current, {\n            type: 'line',\n            options: {\n                maintainAspectRatio: false,\n                scales: {\n                    xAxes: [\n                        {\n                            type: 'time',\n                            time: {\n                                unit: 'week'\n                            }\n                        }\n                    ],\n                    yAxes: [\n                        {\n                            ticks: {\n                                min: 0\n                            }\n                        }\n                    ]\n                }\n            },\n            data: {\n                labels: this.props.data.map(d => d.time),\n                datasets: [{\n                    label: this.props.title,\n                    data: this.props.data.map(d => d.value),\n                    fill: true,\n                    backgroundColor: this.props.color,\n                    borderColor: '#fc6434',\n                    pointRadius: 0,\n                }]\n            }\n        });\n    }\n\n    render() {\n        return <canvas ref={this.canvasRef} />;\n    }\n}\n\n\n// Doughnut\nclass DoughnutChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    componentDidUpdate() {\n        this.myChart.data.labels = this.props.data.map(d => d.label);\n        this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\n        this.myChart.update();\n    }\n\n    componentDidMount() {\n        this.myChart = new Chart(this.canvasRef.current, {\n            type: 'doughnut',\n            options: {\n                maintainAspectRatio: false\n            },\n            data: {\n                labels: this.props.data.map(d => d.label),\n                datasets: [{\n                    data: this.props.data.map(d => d.value),\n                    backgroundColor: this.props.colors\n                }]\n            }\n        });\n\n    }\n\n\n    render() {\n        return <canvas ref={this.canvasRef} />;\n    }\n}\n\n// Bubble\nclass BubbleChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    componentDidUpdate() {\n        this.myChart.update();\n    }\n\n    componentDidMount() {\n        this.myChart = new Chart(this.canvasRef.current, {\n            type: 'bubble',\n            data: {\n                labels: \"Africa\",\n                datasets: [\n                    {\n                        label: [\"China\"],\n                        backgroundColor: \"rgba(255,221,50,0.2)\",\n                        borderColor: \"rgba(255,221,50,1)\",\n                        data: [{\n                            x: 21269017,\n                            y: 5.245,\n                            r: 15\n                        }]\n                    }, {\n                        label: [\"Denmark\"],\n                        backgroundColor: \"rgba(60,186,159,0.2)\",\n                        borderColor: \"rgba(60,186,159,1)\",\n                        data: [{\n                            x: 258702,\n                            y: 7.526,\n                            r: 10\n                        }]\n                    }, {\n                        label: [\"Germany\"],\n                        backgroundColor: \"rgba(0,0,0,0.2)\",\n                        borderColor: \"#000\",\n                        data: [{\n                            x: 3979083,\n                            y: 6.994,\n                            r: 15\n                        }]\n                    }, {\n                        label: [\"Japan\"],\n                        backgroundColor: \"rgba(193,46,12,0.2)\",\n                        borderColor: \"rgba(193,46,12,1)\",\n                        data: [{\n                            x: 4931877,\n                            y: 5.921,\n                            r: 15\n                        }]\n                    }\n                ]\n            },\n            options: {\n                title: {\n                    display: true,\n                    text: 'Predicted world population (millions) in 2050'\n                }, scales: {\n                    yAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Happiness\"\n                        }\n                    }],\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"GDP (PPP)\"\n                        }\n                    }]\n                }\n            }\n        });\n\n    }\n\n\n    render() {\n        return <canvas ref={this.canvasRef} />;\n    }\n}\n\n\n// App\nvar aData = getData()\n\nexport default class AppChart extends React.Component {\n    RenderChart = () => {\n        switch (this.props.value) {\n            case 0:\n                return (\n                    <div className=\"main chart-wrapper\">\n                        <LineChart\n                            data={aData[0].data}\n                            title={aData[0].title}\n                            color=\"#3E517A\"\n                        />\n                    </div>\n                );\n\n            case 1:\n                return (\n                    <div className=\"main chart-wrapper\">\n                        <BarChart\n                            data={aData[1].data}\n                            title={aData[1].title}\n                            color=\"#70CAD1\"\n                        />\n                    </div>\n                );\n\n            case 2:\n                return (\n                    <div className=\"main chart-wrapper\">\n                        <BubbleChart />\n                    </div>\n                );\n\n            case 3:\n                return (\n                    <div className=\"main chart-wrapper\">\n                        <DoughnutChart\n                            data={aData[3].data}\n                            title={aData[3].title}\n                            colors={['#a8e0ff', '#8ee3f5', '#70cad1', '#3e517a', '#b08ea2', '#BBB6DF']}\n                        />\n                    </div>\n                );\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    render() {\n        aData = getData()\n\n        return (\n            <div className=\"App\">\n                <this.RenderChart />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RefreshOutlinedIcon from '@material-ui/icons/RefreshOutlined';\nimport ExitToAppOutlinedIcon from '@material-ui/icons/ExitToAppOutlined';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport AppChart from './AppChart';\nimport { log } from 'util';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n            backgroundColor: 'red',\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n        segments: {\n            flex: 0.3,\n            flexShrink: 0.5,\n            flexGrow: 0.5,\n            display: 'inline-block',\n            flexDirection: 'column',\n            alignItems: 'center'\n        },\n    }),\n);\n\nexport default function Landscape(props: any) {\n    const [alignment, setAlignment] = React.useState<number>(1);\n    const [reload, setReload] = React.useState<boolean>(false);\n    const classes = useStyles();\n\n    const handleAlignment = (event: React.MouseEvent<HTMLElement>, newAlignment: number) => {\n        setAlignment(newAlignment);\n    };\n\n    const onReload = () => {\n        setReload(!reload)\n    };\n\n    return (\n        <div>\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={onReload}>\n                            <RefreshOutlinedIcon />\n                    </IconButton>\n                    \n                        <div className={classes.segments}>\n                            <ToggleButtonGroup\n                                size='small'\n                                value={alignment}\n                                exclusive\n                                onChange={handleAlignment}\n                            >\n                                <ToggleButton value={0} >CURVE </ToggleButton>\n                                <ToggleButton value={1} >BAR</ToggleButton>\n                                <ToggleButton value={2} >BUBBLE</ToggleButton>\n                                <ToggleButton value={3} >PIE</ToggleButton>\n                            </ToggleButtonGroup>\n\n                     \n                        </div>\n                        <Typography variant=\"h6\" className={classes.title} />\n                        <Button color=\"inherit\">{props.username}</Button>\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={props.logoutAction}>\n                        <ExitToAppOutlinedIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n        </div>\n            <AppChart value={alignment} reload={reload}/>\n            </div>\n    );\n}\n","import React, { useState } from 'react';\n\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport '../components/styles/App.css';\nimport logo from '../assets/logo.svg';\nimport AppChart from './AppChart';\nimport Landscape from './Landscape';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        flex: 1,\n        backgroundColor: '#c9b16b',\n    },\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        backgroundColor: '#dfddd5',\n        borderRadius: 12,\n        padding: 30,\n        flex: 0.8\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n        backgroundColor: '#00498e',\n    },\n}));\n\n\nexport default function LoginScreen(props: any) {\n    const classes = useStyles();\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [isLogedIn, setIsLogedIn] = useState(false)\n\n\n    if (isLogedIn) {\n        const onLogoutPress = () => {\n            setIsLogedIn(false);\n            setUsername('');\n            setPassword('');\n            props.logoutAction()\n        };\n\n        return (\n            <Landscape username={username} logoutAction={onLogoutPress}/>\n        )\n    }\n\n    \n    const onChangeTextLogin = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event;\n        setUsername(value);\n    };\n\n    const onChangeTextPassword = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event;\n        setPassword(value);\n    };\n\n    const onLoginPress = () => {\n        props.loginAction(username, password, (success: boolean) => {\n            if (success) {\n                setIsLogedIn(true)\n            } else {\n                alert('Login failed. Please try again.')\n            }\n        });\n    };\n\n    if (props.isLoading) {\n        return (\n            <div className=\"Indicator\">\n                <CircularProgress />\n            </div>\n        )\n    } \n\n    const isCredential = username.trim() !== '' && password.trim() !== ''\n\n    return (\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.form}>\n                <TextField\n                    onChange={onChangeTextLogin}\n                    defaultValue={username}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    id=\"username\"\n                    label=\"Username\"\n                    name=\"username\"\n                />\n                <TextField\n                    onChange={onChangeTextPassword}\n                    defaultValue={password}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    name=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    id=\"password\"\n                    autoComplete=\"current-password\"\n                />\n                <Button\n                    disabled={!isCredential}\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.submit}\n                    onClick={ onLoginPress}\n                > LOGIN</Button>\n            </div>\n            </Container>\n            </header>\n    );\n}\n","import { Action } from 'redux';\n\nexport enum ActionDef {\n    SET_LOADING = 'SET_LOADING',\n    SET_LOGIN = 'SET_LOGIN',\n    LOGOUT = 'LOGOUT'\n};\n\nexport interface User {\n    name: string\n}\n\nexport interface ApplicationState {\n    isLoading: boolean;\n    jsonData: string;\n    user: User;\n}\n\nexport interface SetLoading extends Action {\n    type: ActionDef.SET_LOADING;\n    payload: boolean;\n}\n\nexport interface SetLogin extends Action {\n    type: ActionDef.SET_LOGIN;\n    payload: User;\n}\n\nexport interface Logout extends Action {\n    type: ActionDef.LOGOUT;\n}\n\nexport type ApplicationAction =\n    | SetLoading\n    | SetLogin\n    | Logout\n\n","import { ActionDef, ApplicationState, ApplicationAction } from './types';\nimport produce from 'immer';\n\nconst aData = require('../data/data.json')\n\n\nexport const initialState: ApplicationState = {\n    isLoading: false,\n    jsonData: aData,\n    user: {name: ''}\n}\n\nexport default (state = initialState, action: ApplicationAction) => {\n    switch (action.type) {\n        case ActionDef.SET_LOADING: \n            return produce(state, draft => {\n                draft.isLoading = action.payload;\n            });\n\n        case ActionDef.SET_LOGIN:\n            return produce(state, draft => {\n                draft.user = action.payload;\n            });\n\n        case ActionDef.LOGOUT:\n            return produce(state, draft => {\n                console.log(draft);\n                draft.user.name = '';\n                console.log('svddsdvs');\n                console.log(draft);\n            });\n    }\n\n    return state\n}","import { ActionDef, SetLoading, SetLogin, Logout, ApplicationAction} from './types';\ntype DispatchAll = (arg: ApplicationAction) => (ApplicationAction);\n\nexport const setLoading = (state: boolean): SetLoading => {\n    return {\n        type: ActionDef.SET_LOADING,\n        payload: state\n    }\n}\n\nexport const setLogin = (username: string): SetLogin => {\n    return {\n        type: ActionDef.SET_LOGIN,\n        payload: { name: username }\n    }\n}\n\nexport const logout = (): Logout => {\n    return { \n        type: ActionDef.LOGOUT\n    }\n}\n\nexport const Login = (username: string, \n                      password: string, \n    onComplete: (success: boolean) => void) => (dispatch: DispatchAll) =>  \n{\n    dispatch(setLoading(true))\n\n    setTimeout(() => {\n        if (password === 'secret') {\n            dispatch(setLogin(username))\n            onComplete(true)\n\n        } else {\n            onComplete(false)\n        }\n\n        dispatch(setLoading(false))\n    }, 1000);\n}\n\nexport const LogoutAction = () => (dispatch: DispatchAll) => {\n    dispatch(logout())\n}","import {\n    createStore as _createStore,\n    applyMiddleware,\n} from 'redux'\n\nimport thunk from 'redux-thunk'\nimport reducer, { initialState } from './reducer';\n\nimport { Login, LogoutAction} from './actions';\n\nconst middleware = applyMiddleware(thunk)\n\nconst createStore = () => {\n    return _createStore(reducer, initialState, middleware)\n}\n\nexport { createStore, Login, LogoutAction }\n\n","import { connect } from 'react-redux';\nimport LoginScreen from '../components/LoginScreen';\n\nimport { Login as LoginAction, LogoutAction } from '../core-module/store';\nimport { ApplicationState } from '../core-module/store/types';\n\nconst Login = (connect((state: ApplicationState) => (\n    { \n        data: state.jsonData,\n        logedinUsername: state.user.name,\n        isLoading: state.isLoading,\n    }),\n    {\n        loginAction: LoginAction,\n        logoutAction: LogoutAction\n    })\n)(LoginScreen)\n\nexport default Login;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/styles/index.css';\nimport Login from './containers/Login';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from './core-module/store';\n\nconst store = createStore();\n\nconst ConnectedApp = () => (\n    <Provider store={store}>\n        <Login />\n    </Provider>\n);\n\nReactDOM.render(<ConnectedApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}